{"version":3,"sources":["Input.js","Todo.js","Counter.js","Button.js","Separator.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","value","placeholder","handleChange","event","_this","setState","target","getValue","onEnter","props","length","key","preventDefault","react_default","a","createElement","type","this","onChange","onKeyPress","Component","Todo","_this$props","text","isDone","onClick","className","Counter","num","Button","icon","Separator","sepText","deleteIcon","index_es","faTrash","App","todoItems","load","toggleDone","id","newTodoItems","index","findIndex","todoItem","addItem","inputValue","newItem","uid","push","deleteItem","Object","toConsumableArray","slice","concat","_this2","map","src_Todo_0","assign","src_Button_0","_this3","filter","renderSingleTodo","_this4","_this5","localStorage","setItem","JSON","stringify","parse","getItem","err","save","alreadyDoneCount","todoCount","console","log","src_Input_0","src_Counter_0","src_Separator_0","renderListItemTodo","renderListItemDone","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","register"],"mappings":"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","file":"static/js/main.7f3485e7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Input.css'\n\nclass Input extends Component {\n  state = {\n    value: '',\n    placeholder: 'enter your tasks here'\n  }\n\n  handleChange = event => {\n    this.setState({ value: event.target.value })\n  }\n\n  getValue = event => {\n    const { onEnter } = this.props\n    if (event.target.value.length >= 1 && event.key === 'Enter') {\n      onEnter(this.state.value)\n      this.setState({ value: '' })\n      this.setState({ placeholder: 'enter your tasks here' })\n      event.preventDefault()\n    } else if (event.key === 'Enter') {\n      this.setState({ placeholder: 'please enter a task first' })\n    }\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        placeholder={this.state.placeholder}\n        value={this.state.value}\n        onChange={this.handleChange}\n        onKeyPress={this.getValue}\n      />\n    )\n  }\n}\n\nexport default Input\n","import React, { Component } from 'react'\nimport './Todo.css'\n\nclass Todo extends Component {\n  render() {\n    const { text, isDone, onClick } = this.props\n\n    return (\n      <li className={isDone ? 'li todo' : 'li done'} onClick={() => onClick()}>\n        {text}\n      </li>\n    )\n  }\n}\n\nexport default Todo\n","import React, { Component } from 'react'\nimport './Counter.css'\n\nclass Counter extends Component {\n  render() {\n    return (\n      <section className=\"Counter\">\n        {this.props.text} {this.props.num}\n      </section>\n    )\n  }\n}\n\nexport default Counter\n","import React, { Component } from 'react'\nimport './Button.css'\n\nclass Button extends Component {\n  render() {\n    const { onClick, icon } = this.props\n    return <button onClick={() => onClick()}>{icon}</button>\n  }\n}\n\nexport default Button\n","import React, { Component } from 'react'\nimport './Separator.css'\n\nclass Separator extends Component {\n  render() {\n    const { num, sepText } = this.props\n    return (\n      <section className=\"wrapper-separator\">\n        <div className=\"hr\" />\n        <span className=\"Separator\">{sepText}</span>\n        <div className=\"hr\" />\n      </section>\n    )\n  }\n}\n\nexport default Separator\n","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport uid from 'uid'\nimport Input from './Input'\nimport Todo from './Todo'\nimport Counter from './Counter'\nimport Button from './Button'\nimport Separator from './Separator'\n\nimport './App.css'\nconst deleteIcon = <FontAwesomeIcon className=\"filter-button\" icon={faTrash} />\n\nclass App extends Component {\n  state = {\n    todoItems: this.load()\n  }\n\n  createListItem() {\n    const { todoItems } = this.state\n    return todoItems.map((todoItem, index) => (\n      <section className=\"todo-row\" key={'box' + index}>\n        <Todo\n          key={'todo' + index}\n          {...todoItem}\n          onClick={() => this.toggleDone(todoItem.id)}\n        />\n        <Button\n          key={'button' + index}\n          icon={deleteIcon}\n          onClick={() => this.deleteItem(todoItem.id)}\n        />\n      </section>\n    ))\n  }\n\n  renderListItemDone() {\n    const { todoItems } = this.state\n    return todoItems\n      .filter(todoItem => !todoItem.isDone)\n      .map(todoItem => this.renderSingleTodo(todoItem.id, todoItem))\n  }\n\n  renderListItemTodo() {\n    const { todoItems } = this.state\n    return todoItems\n      .filter(todoItem => todoItem.isDone)\n      .map(todoItem => this.renderSingleTodo(todoItem.id, todoItem))\n  }\n\n  toggleDone = id => {\n    const { todoItems } = this.state\n    const newTodoItems = todoItems\n    const index = todoItems.findIndex(todoItem => todoItem.id === id)\n    newTodoItems[index].isDone = !todoItems[index].isDone\n\n    this.setState({\n      todoItems: newTodoItems\n    })\n  }\n\n  addItem = inputValue => {\n    const { todoItems } = this.state\n    const newTodoItems = todoItems\n    const newItem = { text: inputValue, isDone: true, id: uid() }\n    newTodoItems.push(newItem)\n\n    this.setState({\n      todoItems: newTodoItems\n    })\n  }\n\n  deleteItem = id => {\n    const { todoItems } = this.state\n    const index = todoItems.findIndex(todoItem => todoItem.id === id)\n    const newTodoItems = [\n      ...todoItems.slice(0, index),\n      ...todoItems.slice(index + 1)\n    ]\n\n    this.setState({\n      todoItems: newTodoItems\n    })\n  }\n\n  renderSingleTodo(id, todoItem) {\n    return (\n      <section className=\"todo-row\" key={'box' + id}>\n        <Todo\n          key={'todo' + id}\n          {...todoItem}\n          onClick={() => this.toggleDone(id)}\n        />\n        <Button\n          key={'button' + id}\n          icon={deleteIcon}\n          onClick={() => this.deleteItem(id)}\n        />\n      </section>\n    )\n  }\n\n  save() {\n    localStorage.setItem(\n      'todo-app--todos',\n      JSON.stringify(this.state.todoItems)\n    )\n  }\n\n  load() {\n    try {\n      return JSON.parse(localStorage.getItem('todo-app--todos')) || []\n    } catch (err) {\n      return []\n    }\n  }\n\n  render() {\n    this.save()\n    const alreadyDoneCount = this.state.todoItems.filter(\n      todoItem => todoItem.isDone === false\n    ).length\n\n    const todoCount = this.state.todoItems.filter(\n      todoItem => todoItem.isDone === true\n    ).length\n\n    console.log(this.state)\n    return (\n      <section className=\"App\">\n        <h1>my todos</h1>\n        <Input onEnter={this.addItem} />\n        <section className=\"wrapper-counter\">\n          <Counter text=\"tasks to do:\" num={todoCount} />\n          <span className=\"Counter\"> | </span>\n          <Counter text=\"already done:\" num={alreadyDoneCount} />\n        </section>\n        <section className=\"wrapper-task\">\n          <Separator sepText=\"TODO\" />\n          <ul>{this.renderListItemTodo()}</ul>\n          <Separator sepText=\"DONE\" />\n          <ul>{this.renderListItemDone()}</ul>\n        </section>\n      </section>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.register()\n    })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}